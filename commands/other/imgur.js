const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const axios = require('axios');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('imgur')
        .setDescription('T·∫£i ·∫£nh/GIF/video l√™n Imgur')
        .addSubcommand(subcommand =>
            subcommand
                .setName('upload')
                .setDescription('Nh·∫≠p l·ªánh tr∆∞·ªõc, sau ƒë√≥ tr·∫£ l·ªùi tin nh·∫Øn bot v·ªõi h√¨nh ·∫£nh!')),

    async execute(interaction) {
        await interaction.deferReply();

        const user = interaction.user;
        const now = new Date();
        const hours = now.getHours().toString().padStart(2, '0');
        const minutes = now.getMinutes().toString().padStart(2, '0');
        const seconds = now.getSeconds().toString().padStart(2, '0');

        const embed = new EmbedBuilder()
            .setColor('Blue')
            .setTitle('=== [ ùóúùó†ùóöùó®ùó• ùó®ùó£ùóüùó¢ùóîùóó ] ===')
            .setDescription(`‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n[üçë] ‚Üí **Ng∆∞·ªùi D√πng:** ${user.username}\n[ü•®] ‚Üí **V√†o L√∫c:** ${hours}:${minutes}:${seconds}\n[üñº] **Vui l√≤ng tr·∫£ l·ªùi tin nh·∫Øn n√†y v·ªõi ·∫£nh/GIF/video ƒë·ªÉ t·∫£i l√™n Imgur!**\n‚è≥ B·∫°n c√≥ **30 gi√¢y** ƒë·ªÉ g·ª≠i t·ªáp.\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`)
            .setFooter({ text: 'Ch·ªâ h·ªó tr·ª£ ·∫£nh, GIF v√† video!' });

        // G·ª≠i tin nh·∫Øn v√† l∆∞u ID c·ªßa n√≥ ƒë·ªÉ x·ª≠ l√Ω ph·∫£n h·ªìi
        const botMessage = await interaction.editReply({ embeds: [embed] });

        // Ch·ªù ng∆∞·ªùi d√πng tr·∫£ l·ªùi tin nh·∫Øn n√†y v·ªõi ·∫£nh/GIF/video
        const filter = response => response.reference?.messageId === botMessage.id && response.attachments.size > 0;
        const collector = interaction.channel.createMessageCollector({ filter, time: 30000 });

        collector.on('collect', async response => {
            collector.stop(); // D·ª´ng thu th·∫≠p ph·∫£n h·ªìi sau khi nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn ƒë·∫ßu ti√™n

            let uploadedLinks = [];
            let failedCount = 0;

            for (const attachment of response.attachments.values()) {
                try {
                    const imgurResponse = await axios.get(`https://subhatde.id.vn/imgur?link=${encodeURIComponent(attachment.url)}`);
                    uploadedLinks.push(imgurResponse.data.url);
                } catch (error) {
                    console.error(`L·ªói khi t·∫£i l√™n Imgur:`, error);
                    failedCount++;
                }
            }

            if (!uploadedLinks.length) {
                return response.reply('‚ùå Kh√¥ng th·ªÉ t·∫£i l√™n b·∫•t k·ª≥ file n√†o!');
            }

            const resultEmbed = new EmbedBuilder()
                .setColor('Green')
                .setTitle('=== [ ùóúùó†ùóöùó®ùó• ùó®ùó£ùóüùó¢ùóîùóó ùóõùó¢ùóîÃÄùó° ùóßùóîÃÇÃÅùóß ] ===')
                .setDescription(`‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n[üçë] ‚Üí **Ng∆∞·ªùi D√πng:** ${user.username}\n[ü•®] ‚Üí **V√†o L√∫c:** ${hours}:${minutes}:${seconds}\n[üçí] ‚Üí **Th√†nh C√¥ng:** ${uploadedLinks.length}\n[ü´ê] ‚Üí **Th·∫•t B·∫°i:** ${failedCount}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`)
                .addFields(uploadedLinks.map((link, index) => ({ name: `üì∏ File ${index + 1}`, value: `[Xem tr√™n Imgur](${link})`, inline: true })))
                .setFooter({ text: '·∫¢nh/GIF/video ƒë√£ t·∫£i l√™n th√†nh c√¥ng!' });

            await response.reply({ embeds: [resultEmbed] });
        });

        collector.on('end', collected => {
            if (collected.size === 0) {
                interaction.editReply({ content: '‚è≥ **B·∫°n ƒë√£ h·∫øt th·ªùi gian!** H√£y nh·∫≠p l·ªánh l·∫°i n·∫øu mu·ªën th·ª≠ l·∫°i.', embeds: [] });
            }
        });
    }
};
