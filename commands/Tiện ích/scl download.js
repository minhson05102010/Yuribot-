const { SlashCommandBuilder, AttachmentBuilder } = require('discord.js');
const axios = require('axios');
const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('soundcloud')
    .setDescription('T·∫£i v√† g·ª≠i nh·∫°c t·ª´ SoundCloud')
    .addStringOption(option =>
      option.setName('url')
        .setDescription('Nh·∫≠p link b√†i h√°t tr√™n SoundCloud')
        .setRequired(true)),

  async execute(interaction) {
    await interaction.deferReply(); // Ch·ªù bot x·ª≠ l√Ω

    const url = interaction.options.getString('url');
    const apiUrl = `https://subhatde.id.vn/scl/download?url=${encodeURIComponent(url)}`;

    try {
      // G·ªçi API ƒë·ªÉ l·∫•y th√¥ng tin b√†i h√°t
      const response = await axios.get(apiUrl);
      if (!response.data || !response.data.attachments || response.data.attachments.length === 0) {
        return interaction.editReply('Kh√¥ng t√¨m th·∫•y b√†i h√°t ho·∫∑c kh√¥ng th·ªÉ t·∫£i xu·ªëng!');
      }

      const song = response.data;
      const songUrl = song.attachments[0].url; // ƒê∆∞·ªùng d·∫´n t·∫£i file
      const filePath = path.join(__dirname, 'soundcloud_song.mp3');

      // T·∫£i file nh·∫°c v·ªÅ
      const fileResponse = await axios({
        url: songUrl,
        method: 'GET',
        responseType: 'stream',
      });

      const writer = fs.createWriteStream(filePath);
      fileResponse.data.pipe(writer);

      await new Promise((resolve, reject) => {
        writer.on('finish', resolve);
        writer.on('error', reject);
      });

      // Ki·ªÉm tra k√≠ch th∆∞·ªõc file (Discord gi·ªõi h·∫°n 25MB cho t√†i kho·∫£n th∆∞·ªùng, 50MB cho Nitro)
      const fileSize = fs.statSync(filePath).size / (1024 * 1024); // ƒê·ªïi sang MB
      if (fileSize > 25) {
        const compressedPath = path.join(__dirname, 'compressed_song.mp3');
        await new Promise((resolve, reject) => {
          exec(`ffmpeg -i ${filePath} -b:a 128k ${compressedPath}`, (err) => {
            if (err) reject(err);
            else resolve();
          });
        });

        fs.unlinkSync(filePath); // X√≥a file g·ªëc
        filePath = compressedPath;
      }

      // G·ª≠i file nh·∫°c l√™n Discord
      const attachment = new AttachmentBuilder(filePath, { name: 'soundcloud_song.mp3' });
      await interaction.editReply({
        content: `üé∂ **${song.title}** c·ªßa ${song.author} ƒë√£ ƒë∆∞·ª£c t·∫£i v·ªÅ!`,
        files: [attachment]
      });

      fs.unlinkSync(filePath); // X√≥a file sau khi g·ª≠i
    } catch (error) {
      console.error(error);
      interaction.editReply('C√≥ l·ªói x·∫£y ra khi t·∫£i b√†i h√°t!');
    }
  }
};
