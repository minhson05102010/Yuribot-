const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const axios = require('axios');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('roblox')
    .setDescription('L·∫•y th√¥ng tin h·ªì s∆° Roblox c·ªßa ng∆∞·ªùi d√πng')
    .addStringOption(option => 
      option.setName('username')
      .setDescription('T√™n ng∆∞·ªùi d√πng Roblox')
      .setRequired(true)
    ),

  async execute(interaction) {
    const username = interaction.options.getString('username');
    const apiUrl = `https://huu-tri-api.onrender.com/roblox-profile?username=${encodeURIComponent(username)}`;
    
    try {
      const response = await axios.get(apiUrl);
      const data = response.data;
      
      if (data.status !== 200) {
        return interaction.reply('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng Roblox.');
      }
      
      const profile = data.profile;
      const embed = new EmbedBuilder()
        .setTitle(`H·ªì s∆° Roblox: ${profile.displayname}`)
        .setURL(`https://www.roblox.com/users/${profile.userid}/profile`)
        .setDescription(profile.description || 'Kh√¥ng c√≥ m√¥ t·∫£')
        .setThumbnail(profile.avatarurl)
        .addFields(
          { name: 'T√™n ng∆∞·ªùi d√πng', value: profile.username, inline: true },
          { name: 'User ID', value: profile.userid.toString(), inline: true },
          { name: 'Ng√†y t·∫°o', value: new Date(profile.created).toLocaleDateString(), inline: true },
          { name: 'B·ªã kh√≥a?', value: profile.isbanned ? 'C√≥ üö´' : 'Kh√¥ng ‚úÖ', inline: true }
        )
        .setFooter({ text: 'D·ªØ li·ªáu t·ª´ Huu Tri API', iconURL: 'https://www.roblox.com/favicon.ico' });
      
      return interaction.reply({ embeds: [embed] });
    } catch (error) {
      console.error(error);
      return interaction.reply('‚ö†Ô∏è L·ªói khi l·∫•y d·ªØ li·ªáu h·ªì s∆° Roblox. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
  }
};
