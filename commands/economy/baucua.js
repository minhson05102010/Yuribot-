const { SlashCommandBuilder } = require('discord.js');
const axios = require('axios');
const fs = require('fs');
const path = require('path');

const dataFilePath = path.join(__dirname, '../moderation/data/datauser.json');

function getUserData(userId) {
  const data = JSON.parse(fs.readFileSync(dataFilePath, 'utf8'));
  if (!data[userId]) {
    data[userId] = { soul: 10000 }; // 10,000 Soul m·∫∑c ƒë·ªãnh
    fs.writeFileSync(dataFilePath, JSON.stringify(data, null, 2));
  }
  return data[userId];
}

function saveUserData(userId, userData) {
  const data = JSON.parse(fs.readFileSync(dataFilePath, 'utf8'));
  data[userId] = userData;
  fs.writeFileSync(dataFilePath, JSON.stringify(data, null, 2));
}

module.exports = {
  data: new SlashCommandBuilder()
    .setName('baucua')
    .setDescription('Ch∆°i tr√≤ ch∆°i B·∫ßu Cua v·ªõi ti·ªÅn ·∫£o')
    .addStringOption(option => 
      option.setName('choice')
      .setDescription('Ch·ªçn m·ªôt trong B·∫ßu, Cua, T√¥m, C√°, Nai, G√†')
      .setRequired(true)
    )
    .addIntegerOption(option => 
      option.setName('bet')
      .setDescription('S·ªë Soul mu·ªën c∆∞·ª£c')
      .setRequired(true)
    ),

  async execute(interaction) {
    const userId = interaction.user.id;
    const choice = interaction.options.getString('choice');
    const bet = interaction.options.getInteger('bet');
    const validChoices = ['B·∫ßu', 'Cua', 'T√¥m', 'C√°', 'Nai', 'G√†'];
    
    if (!validChoices.includes(choice)) {
      return interaction.reply('‚ö†Ô∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! Vui l√≤ng ch·ªçn m·ªôt trong: B·∫ßu, Cua, T√¥m, C√°, Nai, G√†.');
    }

    let userData = getUserData(userId);
    
    if (userData.soul < bet) {
      return interaction.reply('üí∏ B·∫°n kh√¥ng c√≥ ƒë·ªß Soul ƒë·ªÉ c∆∞·ª£c s·ªë ti·ªÅn n√†y!');
    }

    try {
      const response = await axios.get('https://huu-tri-api.onrender.com/baucua1');
      const { result } = response.data;
      
      let win = result.includes(choice);
      let winnings = win ? bet * 2 : 0;
      let message = `üé≤ K·∫øt qu·∫£: ${result.join(', ')}\n`;
      
      if (win) {
        userData.soul += winnings;
        message += `üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ th·∫Øng ${winnings} Soul!`;
      } else {
        userData.soul -= bet;
        message += `üò¢ R·∫•t ti·∫øc! B·∫°n ƒë√£ thua ${bet} Soul.`;
      }
      
      saveUserData(userId, userData);
      return interaction.reply(message);
    } catch (error) {
      console.error(error);
      return interaction.reply('‚ö†Ô∏è L·ªói khi k·∫øt n·ªëi v·ªõi API B·∫ßu Cua. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
  }
};
