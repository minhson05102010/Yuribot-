const { SlashCommandBuilder } = require('discord.js');
const axios = require('axios');
const fs = require('fs');
const request = require('request');
const cheerio = require('cheerio');
const { join, resolve } = require("path");
const moment = require("moment-timezone");
const { PasteClient } = require('pastebin-api');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('ghichu')
    .setDescription('√Åp d·ª•ng code t·ª´ pastebin v√† github')
    .addStringOption(option =>
      option.setName('name')
        .setDescription('T√™n file')
        .setRequired(true)
    )
    .addStringOption(option =>
      option.setName('link')
        .setDescription('Link pastebin/github')
        .setRequired(false)
    ),

  async execute(interaction) {
    // Ch·ªâ cho ph√©p b·∫°n (owner) s·ª≠ d·ª•ng l·ªánh n√†y
    const allowedIds = ["1306552024568959016"]; // Thay b·∫±ng Discord ID c·ªßa b·∫°n
    if (!allowedIds.includes(interaction.user.id)) {
      return interaction.reply({
        content: "ƒê√£ b√°o c√°o v·ªÅ admin v√¨ t·ªôi d√πng l·ªánh c·∫•m",
        ephemeral: true
      });
    }

    // Th·ªùi gian hi·ªán t·∫°i
    const gio = moment.tz("Asia/Ho_Chi_Minh").format("HH:mm:ss || D/MM/YYYY");
    
    // Th·ªùi gian bot ƒë√£ ho·∫°t ƒë·ªông
    const lon = process.uptime();
    const hieu = Math.floor(lon / (60 * 60));
    const simp = Math.floor((lon % (60 * 60)) / 60);
    const rin = Math.floor(lon % 60);
    
    // Th√¥ng tin ng∆∞·ªùi d√πng
    const username = interaction.user.username;
    const userId = interaction.user.id;
    const channelName = interaction.channel.name;
    const time = moment.tz("Asia/Ho_Chi_Minh").format("HH:mm:ss (D/MM/YYYY) (dddd)");
    
    // Ghi log khi c√≥ ng∆∞·ªùi s·ª≠ d·ª•ng l·ªánh (lu√¥n hi·ªÉn th·ªã link facebook c·ªßa b·∫°n)
    console.log(`Channel: ${channelName}\nUser: ${username} ƒë√£ d√πng l·ªánh ghichu\nLink Facebook: https://www.facebook.com/lms.cutii\nTime: ${time}`);
    
    const name = interaction.options.getString('name');
    const link = interaction.options.getString('link');
    
    // N·∫øu kh√¥ng c√≥ link, ki·ªÉm tra xem c√≥ t√™n file hay kh√¥ng
    if (!link) {
      // N·∫øu ch·ªâ c√≥ t√™n file, upload l√™n pastebin
      if (name) {
        try {
          const data = fs.readFileSync(`${__dirname}/${name}.js`, "utf-8");
          const client = new PasteClient("R02n6-lNPJqKQCd5VtL4bKPjuK6ARhHb");
          
          const url = await client.createPaste({
            code: data,
            expireDate: 'N',
            format: "javascript",
            name: name || 'noname',
            publicity: 1
          });
          
          const id = url.split('/')[3];
          const rawLink = 'https://pastebin.com/raw/' + id;
          
          return interaction.reply(`Link pastebin cho file ${name}.js: ${rawLink}`);
        } catch (err) {
          return interaction.reply(`L·ªánh ${name} kh√¥ng t·ªìn t·∫°i!`);
        }
      } else {
        // Hi·ªÉn th·ªã menu n·∫øu kh√¥ng c√≥ tham s·ªë
        return interaction.reply({
          content: `=== [ ùó†ùóòùó°ùó® ] ====
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚Üí ùü≠. /ghichu name link_pastebin ƒë·ªÉ upload mdl l√™n file
‚Üí ùüÆ. /ghichu name ƒë·ªÉ upcode l√™n pastebin

Bot ƒë√£ online ƒë∆∞·ª£c t·ªïng c·ªông ${hieu} Gi·ªù ${simp} Ph√∫t ${rin} Gi√¢y
[ ${moment().tz("Asia/Ho_Chi_Minh").format("HH:mm:ss || DD/MM/YYYY")} ]
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`
        });
      }
    } else {
      // N·∫øu c√≥ link, download v√† l∆∞u code
      const urlR = /https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)/;
      const urlMatch = link.match(urlR);
      
      if (!urlMatch) {
        return interaction.reply("Link kh√¥ng h·ª£p l·ªá.");
      }
      
      const url = urlMatch[0];
      
      // ƒê√£ reply t·∫°m th·ªùi ƒë·ªÉ user bi·∫øt l·ªánh ƒëang x·ª≠ l√Ω
      await interaction.deferReply();
      
      if (url.includes('pastebin') || url.includes('github') || url.includes('phamvandien')) {
        try {
          const response = await axios.get(url);
          const data = response.data;
          
          fs.writeFileSync(`${__dirname}/${name}.js`, data, "utf-8");
          
          return interaction.editReply(`ƒê√£ √°p d·ª•ng code v√†o ${name}.js, s·ª≠ d·ª•ng command load ƒë·ªÉ s·ª≠ d·ª•ng!`);
        } catch (err) {
          return interaction.editReply(`ƒê√£ x·∫£y ra l·ªói khi √°p d·ª•ng code v√†o ${name}.js`);
        }
      }
      
      if (url.includes('buildtool') || url.includes('tinyurl.com')) {
        const options = {
          method: 'GET',
          url: url
        };
        
        request(options, function (error, response, body) {
          if (error) {
            return interaction.editReply('Vui l√≤ng ch·ªâ cung c·∫•p link (kh√¥ng ch·ª©a g√¨ kh√°c ngo√†i link)');
          }
          
          const load = cheerio.load(body);
          let codeFound = false;
          
          load('.language-js').each((index, el) => {
            if (index !== 0) return;
            codeFound = true;
            
            const code = el.children[0].data;
            fs.writeFileSync(`${__dirname}/${name}.js`, code, "utf-8");
            
            interaction.editReply(`ƒê√£ th√™m code n√†y v√†o "${name}.js", s·ª≠ d·ª•ng command load ƒë·ªÉ s·ª≠ d·ª•ng!`);
          });
          
          if (!codeFound) {
            interaction.editReply('Kh√¥ng t√¨m th·∫•y code JavaScript trong link.');
          }
        });
        
        return;
      }
      
      if (url.includes('drive.google')) {
        const id = url.match(/[-\w]{25,}/);
        if (!id) {
          return interaction.editReply('ID c·ªßa Google Drive kh√¥ng h·ª£p l·ªá.');
        }
        
        const path = resolve(__dirname, `${name}.js`);
        
        try {
          const response = await axios({
            method: 'GET',
            url: `https://drive.google.com/u/0/uc?id=${id[0]}&export=download`,
            responseType: 'text'
          });
          
          fs.writeFileSync(path, response.data, 'utf-8');
          
          return interaction.editReply(`ƒê√£ th√™m code n√†y v√†o "${name}.js" n·∫øu x·∫£y ra l·ªói th√¨ ƒë·ªïi file drive th√†nh txt nh√©!`);
        } catch (e) {
          return interaction.editReply(`ƒê√£ x·∫£y ra l·ªói khi √°p d·ª•ng code m·ªõi cho "${name}.js".`);
        }
      }
      
      return interaction.editReply('Link kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. Vui l√≤ng s·ª≠ d·ª•ng pastebin, github, buildtool, tinyurl ho·∫∑c Google Drive.');
    }
  }
};
