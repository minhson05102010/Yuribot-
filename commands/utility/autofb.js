const { SlashCommandBuilder } = require('discord.js');
const axios = require('axios');

const ADMIN_ID = "1306552024568959016"; // Thay ID c·ªßa b·∫°n

module.exports = {
    data: new SlashCommandBuilder()
        .setName('autofacebook')
        .setDescription('T·∫°o t√†i kho·∫£n Facebook t·ª± ƒë·ªông')
        .addIntegerOption(option =>
            option.setName('so_luong')
                .setDescription('S·ªë l∆∞·ª£ng t√†i kho·∫£n c·∫ßn t·∫°o')
                .setRequired(true)),

    async execute(interaction) {
        if (interaction.user.id !== ADMIN_ID) {
            return interaction.reply({ content: '‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!', ephemeral: true });
        }

        const soLuong = interaction.options.getInteger('so_luong');
        if (soLuong <= 0) {
            return interaction.reply({ content: '‚ùå S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0!', ephemeral: true });
        }

        await interaction.reply(`üöÄ **B·∫Øt ƒë·∫ßu t·∫°o ${soLuong} t√†i kho·∫£n Facebook...**`);

        let progressMessage = await interaction.fetchReply();
        let createdAccounts = [];

        for (let i = 1; i <= soLuong; i++) {
            const account = await fakeFacebookAccount(i); // Gi·∫£ l·∫≠p t·∫°o t√†i kho·∫£n
            createdAccounts.push(account);

            // C·∫≠p nh·∫≠t tin nh·∫Øn ti·∫øn tr√¨nh
            await progressMessage.edit(`‚è≥ **ƒêang t·∫°o t√†i kho·∫£n... (${i}/${soLuong})**`);
        }

        // Th·ªëng k√™ chi ti·∫øt khi ho√†n th√†nh
        let resultMessage = createdAccounts.map((acc, index) =>
            `üìå **T√†i kho·∫£n #${index + 1}**\n` +
            `üë§ **T√™n**: ${acc.name}\n` +
            `üìß **Email**: ${acc.email}\n` +
            `üîë **M·∫≠t kh·∫©u**: ${acc.password}\n` +
            `üìú **M√£ x√°c nh·∫≠n**: ${acc.verifyCode}\n` +
            `‚úÖ **ID ƒêƒÉng K√Ω**: ${acc.registeredId}\n` +
            `üîó **Cookie**: ${acc.cookie}\n`
        ).join("\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n");

        await progressMessage.edit(`‚úÖ **Ho√†n t·∫•t! ƒê√£ t·∫°o ${soLuong} t√†i kho·∫£n.**\n${resultMessage}`);
    }
};

// üî• Gi·∫£ l·∫≠p t·∫°o t√†i kho·∫£n Facebook
async function fakeFacebookAccount(index) {
    const email = `user${Math.floor(Math.random() * 100000)}@gmail.com`;
    const password = Math.random().toString(36).slice(-8);
    const name = `User_${Math.floor(Math.random() * 10000)}`;
    const verifyCode = Math.floor(100000 + Math.random() * 900000);
    const registeredId = `615${Math.floor(Math.random() * 100000000)}`;
    const cookie = `xs=4A3xRtaEpc...FAKE_COOKIE_${index}`;

    await new Promise(resolve => setTimeout(resolve, 2000)); // Gi·∫£ l·∫≠p th·ªùi gian t·∫°o t√†i kho·∫£n

    return { name, email, password, verifyCode, registeredId, cookie };
}
