const { SlashCommandBuilder } = require('discord.js');
const path = require("path");
const { mkdirSync, writeFileSync, existsSync, createReadStream, readdirSync } = require("fs-extra");
const axios = require("axios");
const { 
    AttachmentBuilder, 
    EmbedBuilder,
    ActionRowBuilder,
    StringSelectMenuBuilder,
    ModalBuilder, 
    TextInputBuilder, 
    TextInputStyle
} = require('discord.js');

// Ensure directories exist
const setupDirectories = () => {
    const dir = path.join(__dirname, '../data/coinmaster/datauser/');
    const cacheDir = path.join(__dirname, '../data/coinmaster/cache/');
    if (!existsSync(dir)) mkdirSync(dir, { recursive: true });
    if (!existsSync(cacheDir)) mkdirSync(cacheDir, { recursive: true });
};

// Check user path
const checkPath = (type, userId) => {
    const pathGame = path.join(__dirname, '../data/coinmaster/datauser', `${userId}.json`);
    if (type === 1) return pathGame;
    if (type === 2) {
        if (existsSync(pathGame)) {
            return require(pathGame);
        }
        return null;
    }
};

// Image download function
const getImage = async (link) => {
    try {
        const response = await axios.get(link, { responseType: "arraybuffer" });
        const imagePath = path.join(__dirname, '../data/coinmaster/cache/coinmaster.png');
        writeFileSync(imagePath, Buffer.from(response.data));
        return imagePath;
    } catch (error) {
        console.error("Error downloading image:", error);
        return null;
    }
};

// Get spin result
const getSpin = (items, getItem, userId) => {
    const pathData = checkPath(2, userId);
    const userPath = checkPath(1, userId);
    
    const i = items.findIndex(index => index === getItem);
    
    if (i === 0) pathData.coins = parseInt(pathData.coins) + pathData.Island.level * 1000;
    if (i === 1) pathData.coins = parseInt(pathData.coins) + pathData.Island.level * 3000;
    if (i === 2) pathData.coins = parseInt(pathData.coins) + pathData.Island.level * 5000;
    if (i === 4) {
        if (pathData.shield !== 3) {
            pathData.spin = parseInt(pathData.spin) + 1;
            pathData.shield = parseInt(pathData.shield) + 1;
        }
    }
    if (i === 6) pathData.spin = parseInt(pathData.spin) + 1;
    if (i === 7) pathData.spin = parseInt(pathData.spin) + 2;
    if (i === 8) pathData.spin = parseInt(pathData.spin) + 5;
    
    writeFileSync(userPath, JSON.stringify(pathData, null, 4));
    return i;
};

// Check if user has enough money
const checkMoney = async (interaction, economy, amount) => {
    const userMoney = await economy.getMoney(interaction.user.id) || 0;
    if (userMoney < parseInt(amount)) {
        await interaction.reply({ content: 'B·∫°n kh√¥ng c√≥ ƒë·ªß ti·ªÅn cho giao d·ªãch n√†y!', ephemeral: true });
        return false;
    }
    return true;
};

module.exports = {
    data: new SlashCommandBuilder()
        .setName('coinmaster')
        .setDescription('Ch∆°i game Coin Master')
        .addSubcommand(subcommand =>
            subcommand
                .setName('register')
                .setDescription('ƒêƒÉng k√Ω ƒë·ªÉ ch∆°i Coin Master'))
        .addSubcommand(subcommand =>
            subcommand
                .setName('quay')
                .setDescription('Quay v√≤ng quay ƒë·ªÉ nh·∫≠n ph·∫ßn th∆∞·ªüng')
                .addIntegerOption(option => 
                    option.setName('s·ªë_l∆∞·ª£t')
                        .setDescription('S·ªë l∆∞·ª£t quay (1000 xu/l∆∞·ª£t)')
                        .setRequired(true)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('x√¢y_d·ª±ng')
                .setDescription('X√¢y d·ª±ng tr√™n ƒë·∫£o c·ªßa b·∫°n'))
        .addSubcommand(subcommand =>
            subcommand
                .setName('c·ª≠a_h√†ng')
                .setDescription('Truy c·∫≠p c·ª≠a h√†ng ƒë·ªÉ mua/b√°n xu ho·∫∑c l∆∞·ª£t quay'))
        .addSubcommand(subcommand =>
            subcommand
                .setName('th√¥ng_tin')
                .setDescription('Xem h·ªì s∆° Coin Master c·ªßa b·∫°n'))
        .addSubcommand(subcommand =>
            subcommand
                .setName('b·∫£ng_x·∫øp_h·∫°ng')
                .setDescription('Xem ng∆∞·ªùi ch∆°i h√†ng ƒë·∫ßu tr√™n m√°y ch·ªß'))
        .addSubcommand(subcommand =>
            subcommand
                .setName('t·∫•n_c√¥ng')
                .setDescription('T·∫•n c√¥ng ƒë·∫£o c·ªßa ng∆∞·ªùi ch∆°i kh√°c')
                .addUserOption(option => 
                    option.setName('m·ª•c_ti√™u')
                        .setDescription('Ng∆∞·ªùi ch∆°i b·∫°n mu·ªën t·∫•n c√¥ng')
                        .setRequired(true)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('tr·ª£_gi√∫p')
                .setDescription('Xem c√°c l·ªánh v√† th√¥ng tin Coin Master')),
                
    async execute(interaction, client) {
        // Make sure directories exist
        setupDirectories();
        
        // For convenience, create a shorthand for checking user data
        const userData = checkPath(2, interaction.user.id);
        const userPath = checkPath(1, interaction.user.id);
        
        // Get the subcommand
        const subcommand = interaction.options.getSubcommand();
        
        // Reference to economy system (adjust based on your implementation)
        const economy = client.economy;

        switch (subcommand) {
            case 'register': {
                if (userData) {
                    return interaction.reply('B·∫°n ƒë√£ ƒëƒÉng k√Ω trong c∆° s·ªü d·ªØ li·ªáu!');
                }
                
                // Current date in local format
                const nDate = new Date().toLocaleString('en-US');
                
                // Create new user object
                const obj = {
                    name: interaction.user.username,
                    ID: interaction.user.id,
                    shield: 3,
                    coins: 20000,
                    attack: 3,
                    Island: {
                        level: 1,
                        coinsLV: 200,
                        data: {
                            tower: 0,
                            tree: 0,
                            pool: 0,
                            pet: 0
                        }
                    },
                    spin: 20,
                    timeRegister: nDate
                };
                
                writeFileSync(userPath, JSON.stringify(obj, null, 4));
                return interaction.reply('üêñ ƒêƒÉng k√Ω th√†nh c√¥ng!');
            }
            
            case 'quay': {
                if (!userData) {
                    const imagePath = await getImage('https://i.imgur.com/6NYfksi.gif');
                    const attachment = new AttachmentBuilder(imagePath);
                    return interaction.reply({ content: "B·∫°n ch∆∞a ƒëƒÉng k√Ω ƒë·ªÉ ch∆°i!", files: [attachment] });
                }
                
                const spinCount = interaction.options.getInteger('s·ªë_l∆∞·ª£t');
                
                if (spinCount <= 0) {
                    return interaction.reply('S·ªë l∆∞·ª£t quay ph·∫£i l·ªõn h∆°n 0!');
                }
                
                const totalCost = spinCount * 1000;
                
                if (userData.coins < totalCost) {
                    return interaction.reply(`B·∫°n kh√¥ng ƒë·ªß xu! C·∫ßn ${totalCost} xu cho ${spinCount} l∆∞·ª£t quay.`);
                }
                
                // Decrease coins
                userData.coins = parseInt(userData.coins) - totalCost;
                userData.spin = parseInt(userData.spin) + spinCount;
                writeFileSync(userPath, JSON.stringify(userData, null, 4));
                
                return interaction.reply(`B·∫°n ƒë√£ mua ${spinCount} l∆∞·ª£t quay v·ªõi gi√° ${totalCost} xu. T·ªïng s·ªë l∆∞·ª£t quay hi·ªán t·∫°i: ${userData.spin}`);
            }
            
            case 'x√¢y_d·ª±ng': {
                if (!userData) {
                    const imagePath = await getImage('https://i.imgur.com/zn0ifgY.gif');
                    const attachment = new AttachmentBuilder(imagePath);
                    return interaction.reply({ content: "B·∫°n ch∆∞a ƒëƒÉng k√Ω ƒë·ªÉ ch∆°i!", files: [attachment] });
                }
                
                if (userData.coins < 10000) {
                    return interaction.reply('B·∫°n c·∫ßn 10.000 xu ƒë·ªÉ x√¢y d·ª±ng m·ªôt c√¥ng tr√¨nh!');
                }
                
                // Create building options
                const buildingOptions = [
                    { label: `Th√°p (${userData.Island.data.tower}/50)`, value: 'tower' },
                    { label: `C√¢y (${userData.Island.data.tree}/50)`, value: 'tree' },
                    { label: `H·ªì b∆°i (${userData.Island.data.pool}/50)`, value: 'pool' },
                    { label: `Th√∫ c∆∞ng (${userData.Island.data.pet}/50)`, value: 'pet' }
                ];
                
                const row = new ActionRowBuilder()
                    .addComponents(
                        new StringSelectMenuBuilder()
                            .setCustomId('build-selection')
                            .setPlaceholder('Ch·ªçn c√¥ng tr√¨nh ƒë·ªÉ x√¢y d·ª±ng')
                            .addOptions(buildingOptions)
                    );
                
                await interaction.reply({
                    content: 'B·∫°n mu·ªën x√¢y d·ª±ng g√¨ tr√™n ƒë·∫£o c·ªßa m√¨nh?',
                    components: [row]
                });
                
                // Handle selection
                const filter = i => i.customId === 'build-selection' && i.user.id === interaction.user.id;
                const collector = interaction.channel.createMessageComponentCollector({ filter, time: 30000 });
                
                collector.on('collect', async i => {
                    const building = i.values[0];
                    
                    if (userData.Island.data[building] >= 50) {
                        return i.update({ content: "Khu v·ª±c n√†y ƒë√£ ƒë·∫°t c·∫•p ƒë·ªô t·ªëi ƒëa!", components: [] });
                    }
                    
                    // Reduce coins and increase building level
                    userData.coins = userData.coins - 10000;
                    userData.Island.data[building] = userData.Island.data[building] + 1;
                    
                    // Check if island should level up
                    if (userData.Island.data.tower >= 50 && 
                        userData.Island.data.tree >= 50 && 
                        userData.Island.data.pool >= 50 && 
                        userData.Island.data.pet >= 50) {
                        
                        userData.Island.level = userData.Island.level + 1;
                        userData.Island.coinsLV = userData.Island.coinsLV + 100;
                        userData.Island.data.tower = 0;
                        userData.Island.data.tree = 0;
                        userData.Island.data.pool = 0;
                        userData.Island.data.pet = 0;
                        
                        await i.update({ 
                            content: `X√¢y d·ª±ng th√†nh c√¥ng! ƒê·∫£o c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c n√¢ng c·∫•p l√™n C·∫•p ${userData.Island.level}!`,
                            components: []
                        });
                    } else {
                        const buildingNames = { 'tower': 'Th√°p', 'tree': 'C√¢y', 'pool': 'H·ªì b∆°i', 'pet': 'Th√∫ c∆∞ng' };
                        await i.update({ 
                            content: `X√¢y d·ª±ng th√†nh c√¥ng! ${buildingNames[building]}: ${userData.Island.data[building]}/50`,
                            components: []
                        });
                    }
                    
                    writeFileSync(userPath, JSON.stringify(userData, null, 4));
                });
                
                collector.on('end', collected => {
                    if (collected.size === 0) {
                        interaction.followUp({ content: 'ƒê√£ h·∫øt th·ªùi gian ch·ªçn.', ephemeral: true });
                    }
                });
                
                break;
            }
            
            case 'c·ª≠a_h√†ng': {
                if (!userData) {
                    const imagePath = await getImage('https://i.imgur.com/zn0ifgY.gif');
                    const attachment = new AttachmentBuilder(imagePath);
                    return interaction.reply({ content: "B·∫°n ch∆∞a ƒëƒÉng k√Ω ƒë·ªÉ ch∆°i!", files: [attachment] });
                }
                
                const row = new ActionRowBuilder()
                    .addComponents(
                        new StringSelectMenuBuilder()
                            .setCustomId('shop-selection')
                            .setPlaceholder('Ch·ªçn m·ªôt l·ª±a ch·ªçn c·ª≠a h√†ng')
                            .addOptions([
                                {
                                    label: 'ƒê·ªïi ti·ªÅn th√†nh xu tr√≤ ch∆°i',
                                    description: '0% hoa h·ªìng',
                                    value: 'buy_coins'
                                },
                                {
                                    label: 'ƒê·ªïi xu tr√≤ ch∆°i th√†nh ti·ªÅn',
                                    description: '0% hoa h·ªìng',
                                    value: 'sell_coins'
                                },
                                {
                                    label: 'Mua l∆∞·ª£t quay',
                                    description: '10 l∆∞·ª£t quay v·ªõi gi√° 2000 ti·ªÅn',
                                    value: 'buy_spins'
                                }
                            ])
                    );
                
                await interaction.reply({
                    content: 'Ch√†o m·ª´ng ƒë·∫øn v·ªõi c·ª≠a h√†ng! B·∫°n mu·ªën l√†m g√¨?',
                    components: [row]
                });
                
                // Handle shop selection
                const filter = i => i.customId === 'shop-selection' && i.user.id === interaction.user.id;
                const collector = interaction.channel.createMessageComponentCollector({ filter, time: 30000 });
                
                collector.on('collect', async i => {
                    // Create a modal for amount input
                    const modal = new ModalBuilder()
                        .setCustomId(`shop-${i.values[0]}`)
                        .setTitle('Giao d·ªãch C·ª≠a h√†ng');
                    
                    // Add input field based on selection
                    if (i.values[0] === 'buy_coins') {
                        modal.addComponents(
                            new ActionRowBuilder().addComponents(
                                new TextInputBuilder()
                                    .setCustomId('amount')
                                    .setLabel('B·∫°n mu·ªën ƒë·ªïi bao nhi√™u ti·ªÅn th√†nh xu?')
                                    .setStyle(TextInputStyle.Short)
                                    .setPlaceholder('Nh·∫≠p s·ªë l∆∞·ª£ng')
                                    .setRequired(true)
                            )
                        );
                    } else if (i.values[0] === 'sell_coins') {
                        modal.addComponents(
                            new ActionRowBuilder().addComponents(
                                new TextInputBuilder()
                                    .setCustomId('amount')
                                    .setLabel('B·∫°n mu·ªën ƒë·ªïi bao nhi√™u xu th√†nh ti·ªÅn?')
                                    .setStyle(TextInputStyle.Short)
                                    .setPlaceholder('Nh·∫≠p s·ªë l∆∞·ª£ng')
                                    .setRequired(true)
                            )
                        );
                    } else if (i.values[0] === 'buy_spins') {
                        modal.addComponents(
                            new ActionRowBuilder().addComponents(
                                new TextInputBuilder()
                                    .setCustomId('amount')
                                    .setLabel('B·∫°n mu·ªën mua bao nhi√™u l∆∞·ª£t? (200 ti·ªÅn/l∆∞·ª£t)')
                                    .setStyle(TextInputStyle.Short)
                                    .setPlaceholder('Nh·∫≠p s·ªë l∆∞·ª£ng')
                                    .setRequired(true)
                            )
                        );
                    }
                    
                    await i.showModal(modal);
                });
                
                // Handle modal submissions
                client.on('interactionCreate', async interaction => {
                    if (!interaction.isModalSubmit()) return;
                    
                    if (interaction.customId.startsWith('shop-')) {
                        const transaction = interaction.customId.split('-')[1];
                        const amount = parseInt(interaction.fields.getTextInputValue('amount'));
                        
                        if (isNaN(amount) || amount <= 0) {
                            return interaction.reply({ content: 'Vui l√≤ng nh·∫≠p m·ªôt s·ªë d∆∞∆°ng h·ª£p l·ªá!', ephemeral: true });
                        }
                        
                        // Process transaction based on type
                        if (transaction === 'buy_coins') {
                            // Check if user has enough money
                            if (!(await checkMoney(interaction, economy, amount))) return;
                            
                            // Update user data
                            await economy.removeMoney(interaction.user.id, amount);
                            userData.coins = userData.coins + amount;
                            writeFileSync(userPath, JSON.stringify(userData, null, 4));
                            
                            await interaction.reply(`ƒê√£ th√™m th√†nh c√¥ng ${amount} xu v√†o t√†i kho·∫£n tr√≤ ch∆°i c·ªßa b·∫°n!`);
                        }
                        else if (transaction === 'sell_coins') {
                            // Check if user has enough coins
                            if (userData.coins < amount) {
                                return interaction.reply({ content: "B·∫°n kh√¥ng c√≥ ƒë·ªß xu cho giao d·ªãch n√†y!", ephemeral: true });
                            }
                            
                            // Update user data
                            userData.coins = userData.coins - amount;
                            await economy.addMoney(interaction.user.id, amount);
                            writeFileSync(userPath, JSON.stringify(userData, null, 4));
                            
                            await interaction.reply(`ƒê√£ r√∫t th√†nh c√¥ng ${amount} xu t·ª´ t√†i kho·∫£n tr√≤ ch∆°i c·ªßa b·∫°n!`);
                        }
                        else if (transaction === 'buy_spins') {
                            const cost = amount * 200;
                            
                            // Check if user has enough money
                            if (!(await checkMoney(interaction, economy, cost))) return;
                            
                            // Update user data
                            await economy.removeMoney(interaction.user.id, cost);
                            userData.spin = userData.spin + amount;
                            writeFileSync(userPath, JSON.stringify(userData, null, 4));
                            
                            await interaction.reply(`ƒê√£ mua th√†nh c√¥ng ${amount} l∆∞·ª£t quay v·ªõi gi√° ${cost} ti·ªÅn!`);
                        }
                    }
                });
                
                break;
            }
            
            case 'th√¥ng_tin': {
                if (!userData) {
                    const imagePath = await getImage('https://i.imgur.com/zn0ifgY.gif');
                    const attachment = new AttachmentBuilder(imagePath);
                    return interaction.reply({ content: "B·∫°n ch∆∞a ƒëƒÉng k√Ω ƒë·ªÉ ch∆°i!", files: [attachment] });
                }
                
                const embed = new EmbedBuilder()
                    .setTitle('üèùÔ∏è H·ªí S∆† COINMASTER üèùÔ∏è')
                    .setColor('#0099ff')
                    .setThumbnail(interaction.user.displayAvatarURL())
                    .addFields(
                        { name: 'C·∫•p ƒë·ªô ƒë·∫£o', value: `${userData.Island.level}`, inline: true },
                        { name: 'L∆∞·ª£t quay c√≤n l·∫°i', value: `${userData.spin}`, inline: true },
                        { name: 'Khi√™n', value: `${userData.shield}`, inline: true },
                        { name: 'L∆∞·ª£t t·∫•n c√¥ng', value: `${userData.attack || 3}`, inline: true },
                        { name: 'Xu', value: `${userData.coins}`, inline: true },
                        { name: 'C√¥ng tr√¨nh tr√™n ƒë·∫£o', value: 
                            `Th√°p: ${userData.Island.data.tower}/50\n` +
                            `C√¢y: ${userData.Island.data.tree}/50\n` +
                            `H·ªì b∆°i: ${userData.Island.data.pool}/50\n` +
                            `Th√∫ c∆∞ng: ${userData.Island.data.pet}/50`
                        }
                    )
                    .setFooter({ text: `ƒêƒÉng k√Ω v√†o: ${userData.timeRegister}` });
                
                return interaction.reply({ embeds: [embed] });
            }
            
            case 'b·∫£ng_x·∫øp_h·∫°ng': {
                if (!userData) {
                    const imagePath = await getImage('https://i.imgur.com/zn0ifgY.gif');
                    const attachment = new AttachmentBuilder(imagePath);
                    return interaction.reply({ content: "B·∫°n ch∆∞a ƒëƒÉng k√Ω ƒë·ªÉ ch∆°i!", files: [attachment] });
                }
                
                const data = readdirSync(path.join(__dirname, '../data/coinmaster/datauser'));
                if (data.length < 3) {
                    return interaction.reply('C·∫ßn c√≥ √≠t nh·∫•t 3 ng∆∞·ªùi ch∆°i tr√™n m√°y ch·ªß ƒë·ªÉ xem b·∫£ng x·∫øp h·∫°ng h√†ng ƒë·∫ßu!');
                }
                
                // Get all player data
                const players = [];
                for (let i of data) {
                    const playerData = require(path.join(__dirname, '../data/coinmaster/datauser', i));
                    players.push(playerData);
                }
                
                // Sort by island level
                players.sort((a, b) => b.Island.level - a.Island.level);
                
                // Create embed with top 3 players
                const embed = new EmbedBuilder()
                    .setTitle('üèÜ C·∫§P ƒê·ªò ƒê·∫¢O CAO NH·∫§T üèÜ')
                    .setColor('#FFD700')
                    .setDescription('Nh·ªØng ng∆∞·ªùi ch∆°i c√≥ ƒë·∫£o c·∫•p cao nh·∫•t:');
                
                // Add top 3 (or as many as available)
                const topCount = Math.min(players.length, 3);
                for (let i = 0; i < topCount; i++) {
                    const medals = ['ü•á', 'ü•à', 'ü•â'];
                    embed.addFields({
                        name: `${medals[i]} ${i+1}. ${players[i].name}`,
                        value: `C·∫•p ƒë·ªô ƒë·∫£o: ${players[i].Island.level}\nXu: ${players[i].coins}`
                    });
                }
                
                return interaction.reply({ embeds: [embed] });
            }
            
            case 't·∫•n_c√¥ng': {
                if (!userData) {
                    const imagePath = await getImage('https://i.imgur.com/zn0ifgY.gif');
                    const attachment = new AttachmentBuilder(imagePath);
                    return interaction.reply({ content: "B·∫°n ch∆∞a ƒëƒÉng k√Ω ƒë·ªÉ ch∆°i!", files: [attachment] });
                }
                
                // Check if user has attack attempts left
                if (!userData.attack) userData.attack = 3;
                
                if (userData.attack <= 0) {
                    return interaction.reply('B·∫°n ƒë√£ h·∫øt l∆∞·ª£t t·∫•n c√¥ng! Ch·ªù reset h√†ng ng√†y ho·∫∑c quay ƒë·ªÉ nh·∫≠n th√™m.');
                }
                
                const targetUser = interaction.options.getUser('m·ª•c_ti√™u');
                
                // Can't attack yourself
                if (targetUser.id === interaction.user.id) {
                    return interaction.reply('B·∫°n kh√¥ng th·ªÉ t·∫•n c√¥ng ch√≠nh m√¨nh!');
                }
                
                // Check if target user is registered
                const targetData = checkPath(2, targetUser.id);
                const targetPath = checkPath(1, targetUser.id);
                
                if (!targetData) {
                    return interaction.reply(`${targetUser.username} ch∆∞a ƒëƒÉng k√Ω ch∆°i Coin Master!`);
                }
                
                // Check for shield
                if (targetData.shield > 0) {
                    targetData.shield = targetData.shield - 1;
                    writeFileSync(targetPath, JSON.stringify(targetData, null, 4));
                    
                    // Reduce attacker's attack count
                    userData.attack = userData.attack - 1;
                    writeFileSync(userPath, JSON.stringify(userData, null, 4));
                    
                    return interaction.reply(`Cu·ªôc t·∫•n c√¥ng ƒë√£ b·ªã ch·∫∑n b·ªüi khi√™n! ${targetUser.username} c√≤n ${targetData.shield} khi√™n.`);
                }
                
                // Get a random building to attack
                const buildings = ['tower', 'tree', 'pool', 'pet'];
                const buildingNames = { 'tower': 'Th√°p', 'tree': 'C√¢y', 'pool': 'H·ªì b∆°i', 'pet': 'Th√∫ c∆∞ng' };
                
                // Find non-zero buildings
                const availableBuildings = buildings.filter(b => targetData.Island.data[b] > 0);
                
                if (availableBuildings.length === 0) {
                    return interaction.reply(`${targetUser.username} kh√¥ng c√≥ c√¥ng tr√¨nh n√†o ƒë·ªÉ t·∫•n c√¥ng!`);
                }
                
                const randomBuilding = availableBuildings[Math.floor(Math.random() * availableBuildings.length)];
                
                // Reduce building value
                targetData.Island.data[randomBuilding] = Math.max(0, targetData.Island.data[randomBuilding] - 1);
                writeFileSync(targetPath, JSON.stringify(targetData, null, 4));
                
                // Reduce attacker's attack count
                userData.attack = userData.attack - 1;
                writeFileSync(userPath, JSON.stringify(userData, null, 4));
                
                // Try to DM the target
                try {
                    await targetUser.send(`B·∫°n ƒë√£ b·ªã t·∫•n c√¥ng b·ªüi ${interaction.user.username}! ${buildingNames[randomBuilding]} c·ªßa b·∫°n ƒë√£ b·ªã h∆∞ h·∫°i.`);
                } catch (error) {
                    console.error("Kh√¥ng th·ªÉ g·ª≠i DM ƒë·∫øn ng∆∞·ªùi ch∆°i b·ªã t·∫•n c√¥ng", error);
                }
                
                return interaction.reply(`B·∫°n ƒë√£ t·∫•n c√¥ng th√†nh c√¥ng ${buildingNames[randomBuilding]} c·ªßa ${targetUser.username}! C√≤n ${userData.attack} l∆∞·ª£t t·∫•n c√¥ng.`);
            }
            
            case 'tr·ª£_gi√∫p': {
                const embed = new EmbedBuilder()
                    .setTitle('üèùÔ∏è TR·ª¢ GI√öP COINMASTER üèùÔ∏è')
                    .setColor('#00FFFF')
                    .setDescription('Ch√†o m·ª´ng ƒë·∫øn v·ªõi Coin Master! X√¢y d·ª±ng ƒë·∫£o c·ªßa b·∫°n v√† tr·ªü th√†nh ng∆∞·ªùi ch∆°i gi√†u nh·∫•t!')
                    .addFields(
                        { name: '/coinmaster register', value: 'ƒêƒÉng k√Ω ƒë·ªÉ ch∆°i tr√≤ ch∆°i' },
                        { name: '/coinmaster quay', value: 'Quay v√≤ng quay ƒë·ªÉ nh·∫≠n ph·∫ßn th∆∞·ªüng (1000 xu/l∆∞·ª£t)' },
                        { name: '/coinmaster x√¢y_d·ª±ng', value: 'X√¢y d·ª±ng c√¥ng tr√¨nh tr√™n ƒë·∫£o c·ªßa b·∫°n (10000 xu/c√¥ng tr√¨nh)' },
                        { name: '/coinmaster c·ª≠a_h√†ng', value: 'ƒê·ªïi ti·ªÅn/xu ho·∫∑c mua l∆∞·ª£t quay' },
                        { name: '/coinmaster th√¥ng_tin', value: 'Xem h·ªì s∆° tr√≤ ch∆°i c·ªßa b·∫°n' },
                        { name: '/coinmaster b·∫£ng_x·∫øp_h·∫°ng', value: 'Xem ng∆∞·ªùi ch∆°i h√†ng ƒë·∫ßu tr√™n m√°y ch·ªß' },
                        { name: '/coinmaster t·∫•n_c√¥ng', value: 'T·∫•n c√¥ng ƒë·∫£o c·ªßa ng∆∞·ªùi ch∆°i kh√°c' }
                    )
                    .setImage('https://i.imgur.com/rQPzm8J.jpeg')
                    .setFooter({ text: 'Ch√∫c vui v·∫ª khi ch∆°i Coin Master!' });
                
                return interaction.reply({ embeds: [embed] });
            }
            
            default:
                return interaction.reply('L·ªánh ph·ª• kh√¥ng h·ª£p l·ªá! S·ª≠ d·ª•ng `/coinmaster tr·ª£_gi√∫p` ƒë·ªÉ xem t·∫•t c·∫£ c√°c l·ªánh c√≥ s·∫µn.');
        }
    }
};
