const { SlashCommandBuilder, AttachmentBuilder } = require('discord.js');
const fs = require('fs');
const axios = require('axios');
const path = require('path'); // ‚úÖ Fix l·ªói path is not defined

const moneyFile = path.join(__dirname, '../data/money.json'); // ‚úÖ ƒê∆∞·ªùng d·∫´n ch√≠nh x√°c

// Ki·ªÉm tra th∆∞ m·ª•c v√† file JSON tr∆∞·ªõc khi s·ª≠ d·ª•ng
if (!fs.existsSync(path.dirname(moneyFile))) {
    fs.mkdirSync(path.dirname(moneyFile), { recursive: true });
}

if (!fs.existsSync(moneyFile)) {
    fs.writeFileSync(moneyFile, JSON.stringify({}, null, 2));
}

// ƒê·ªçc d·ªØ li·ªáu ng∆∞·ªùi ch∆°i t·ª´ file
let moneyData = JSON.parse(fs.readFileSync(moneyFile, 'utf8'));


module.exports = {
    data: new SlashCommandBuilder()
        .setName('taixiu')
        .setDescription('Ch∆°i t√†i x·ªâu (T√†i/X·ªâu/B√£o)')
        .addStringOption(option =>
            option.setName('loai')
                .setDescription('Ch·ªçn t√†i/x·ªâu/b√£o')
                .setRequired(true)
                .addChoices(
                    { name: 'T√†i', value: 'tai' },
                    { name: 'X·ªâu', value: 'xiu' },
                    { name: 'B√£o', value: 'bao' }
                )
        )
        .addIntegerOption(option =>
            option.setName('tien')
                .setDescription('S·ªë ti·ªÅn c∆∞·ª£c')
                .setRequired(true)
        ),

    async execute(interaction) {
        const userId = interaction.user.id;
        const userName = interaction.user.username;

        let moneyData = fs.existsSync(moneyFile) ? JSON.parse(fs.readFileSync(moneyFile, 'utf8')) : {};

        // Ki·ªÉm tra n·∫øu ng∆∞·ªùi ch∆°i ch∆∞a c√≥ t√†i kho·∫£n
        if (!moneyData[userId]) {
            moneyData[userId] = { money: 1000 };
            fs.writeFileSync(moneyFile, JSON.stringify(moneyData, null, 2));
            return interaction.reply(`‚úÖ **T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o!** B·∫°n nh·∫≠n **1000$** ƒë·ªÉ b·∫Øt ƒë·∫ßu.`);
        }

        const loaiCuoc = interaction.options.getString('loai');
        const tienCuoc = interaction.options.getInteger('tien');

        if (tienCuoc < 20) {
            return interaction.reply('‚ö†Ô∏è Ti·ªÅn c∆∞·ª£c t·ªëi thi·ªÉu l√† **20$**!');
        }
        if (moneyData[userId].money < tienCuoc) {
            return interaction.reply('‚ùå B·∫°n kh√¥ng ƒë·ªß ti·ªÅn c∆∞·ª£c!');
        }

        // G·ª≠i th√¥ng b√°o ban ƒë·∫ßu
        let message = await interaction.reply(`üé≤ **${userName} ƒë√£ ƒë·∫∑t c∆∞·ª£c ${tienCuoc}$ v√†o ${loaiCuoc.toUpperCase()}!**\n‚è≥ ƒêang l·∫Øc x√∫c x·∫Øc... Vui l√≤ng ƒë·ª£i **10 gi√¢y**`);

        // C·∫≠p nh·∫≠t tin nh·∫Øn ƒë·∫øm ng∆∞·ª£c t·ª´ng gi√¢y
        for (let i = 10; i > 0; i--) {
            await new Promise(resolve => setTimeout(resolve, 1000));
            await message.edit(`üé≤ **X√∫c x·∫Øc ƒëang lƒÉn...** ‚è≥ C√≤n ${i} gi√¢y`);
        }

        try {
            const response = await axios.get('https://api.satoru.site/game/taixiu');
            const { total, result, gif, images } = response.data;
            const isBao = images[0] === images[1] && images[1] === images[2]; // Ki·ªÉm tra b·ªô ba ƒë·ªìng nh·∫•t

            let ketQua = '';
            let tienNhan = 0;

            // Ch·ªù 15 gi√¢y ti·∫øp theo tr∆∞·ªõc khi hi·ªÉn th·ªã k·∫øt qu·∫£
            for (let i = 15; i > 0; i--) {
                await new Promise(resolve => setTimeout(resolve, 1000));
                await message.edit(`üé≤ **X√∫c x·∫Øc ƒëang lƒÉn...** ‚è≥ C√≤n ${i} gi√¢y`);
            }

            if (loaiCuoc === 'bao') {
                if (isBao) {
                    tienNhan = tienCuoc * 33; // Th·∫Øng b√£o x33 ti·ªÅn c∆∞·ª£c
                    ketQua = `üéâ B·∫°n th·∫Øng **B√ÉO**! Nh·∫≠n **${tienNhan}$**`;
                } else {
                    tienNhan = -tienCuoc;
                    ketQua = `‚ùå Kh√¥ng ra B√ÉO! M·∫•t **${Math.abs(tienNhan)}$**`;
                }
            } else {
                if (isBao) {
                    tienNhan = -tienCuoc + Math.floor(tienCuoc * 0.3); // Ho√†n l·∫°i 30% ti·ªÅn c∆∞·ª£c n·∫øu ra b√£o
                    ketQua = `‚ö°Ô∏è X√∫c x·∫Øc ra **B√ÉO**! B·∫°n ƒë∆∞·ª£c ho√†n l·∫°i **30%** (Nh·∫≠n **${Math.abs(tienNhan)}$**)`;
                } else if ((loaiCuoc === 'tai' && result === 't√†i') || (loaiCuoc === 'xiu' && result === 'x·ªâu')) { 

                    tienNhan = tienCuoc * 2; // Th·∫Øng x2 ti·ªÅn c∆∞·ª£c
                    ketQua = `üéâ B·∫°n th·∫Øng c∆∞·ª£c! Nh·∫≠n **${tienNhan}$**`;
                } else {
                    tienNhan = -tienCuoc;
                    ketQua = `‚ùå B·∫°n thua! M·∫•t **${Math.abs(tienNhan)}$**`;
                }
            }

            // C·∫≠p nh·∫≠t s·ªë d∆∞
            moneyData[userId].money += tienNhan;
            fs.writeFileSync(moneyFile, JSON.stringify(moneyData, null, 2));

            const attachment = new AttachmentBuilder(gif);

            await message.edit({
                content: `üé≤ **K·∫øt qu·∫£**:\nüéØ X√∫c x·∫Øc: ${total}\nüî¢ K·∫øt qu·∫£: **${result.toUpperCase()}**\nüí∞ ${ketQua}\nüíµ S·ªë d∆∞ m·ªõi: **${moneyData[userId].money}$**`,
                files: [attachment]
            });

        } catch (error) {
            console.error(error);
            await message.edit('‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ API.');
        }
    }
};
