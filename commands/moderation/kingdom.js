const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const storage = require('node-persist');

// Kh·ªüi t·∫°o l∆∞u tr·ªØ d·ªØ li·ªáu cho Kingdom
(async () => {
  await storage.init({ dir: './kingdomData' });
})();

const LEVEL_REQUIREMENTS = {
  2: 1000,
  3: 10000
};

const KINGDOM_IMAGES = {
  1: 'https://i.imgur.com/lv1.png', // H√¨nh LV1
  2: 'https://i.imgur.com/lv2.png', // H√¨nh LV2
  3: 'https://i.imgur.com/lv3.png'  // H√¨nh LV3 (K·ªãch)
};

module.exports = {
  data: new SlashCommandBuilder()
    .setName('kingdom')
    .setDescription('X√¢y d·ª±ng v√† n√¢ng c·∫•p v∆∞∆°ng qu·ªëc b√≥ng t·ªëi!')
    .addSubcommand(subcommand =>
      subcommand
        .setName('darkkingdom')
        .setDescription('X√¢y d·ª±ng ho·∫∑c n√¢ng c·∫•p v∆∞∆°ng qu·ªëc.')
        .addIntegerOption(option =>
          option.setName('contribute')
            .setDescription('S·ªë Soul b·∫°n mu·ªën ƒë√≥ng g√≥p')
            .setRequired(true)
        )
    )
    .addSubcommand(subcommand =>
      subcommand
        .setName('kingdomstatus')
        .setDescription('Xem tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa v∆∞∆°ng qu·ªëc.')
    ),

  async execute(interaction) {
    const subcommand = interaction.options.getSubcommand();

    // üåë X·ª≠ l√Ω ƒë√≥ng g√≥p Soul cho Kingdom
    if (subcommand === 'darkkingdom') {
      const userId = interaction.user.id;
      const contributeSouls = interaction.options.getInteger('contribute');

      let kingdomData = (await storage.getItem('kingdomData')) || {
        level: 1,
        totalSouls: 0,
        contributors: {}
      };

      // C·∫≠p nh·∫≠t ƒë√≥ng g√≥p
      kingdomData.totalSouls += contributeSouls;
      kingdomData.contributors[userId] = (kingdomData.contributors[userId] || 0) + contributeSouls;

      let levelUpMessage = '';
      const currentLevel = kingdomData.level;

      // Ki·ªÉm tra v√† n√¢ng c·∫•p v∆∞∆°ng qu·ªëc
      if (currentLevel < 3 && kingdomData.totalSouls >= LEVEL_REQUIREMENTS[currentLevel + 1]) {
        kingdomData.level++;
        kingdomData.totalSouls -= LEVEL_REQUIREMENTS[currentLevel + 1];
        levelUpMessage = `üéâ V∆∞∆°ng qu·ªëc ƒë√£ ƒë∆∞·ª£c n√¢ng c·∫•p l√™n c·∫•p **${kingdomData.level}**!`;

        if (kingdomData.level === 3) {
          levelUpMessage += '\nüíÄ **Dark Kingdom ƒë√£ ƒë·∫°t c·∫•p K·ªãch!**';
        }
      }

      // L∆∞u d·ªØ li·ªáu
      await storage.setItem('kingdomData', kingdomData);

      // T·∫°o Embed tr·∫£ v·ªÅ
      const embed = new EmbedBuilder()
        .setColor(0x5d3fd3)
        .setTitle('‚öîÔ∏è **Dark Kingdom Status** ‚öîÔ∏è')
        .setDescription(`üîÆ V∆∞∆°ng qu·ªëc hi·ªán ƒëang ·ªü c·∫•p **${kingdomData.level}**`)
        .addFields(
          { name: '‚ú® T·ªïng s·ªë Soul:', value: `${kingdomData.totalSouls} Soul`, inline: true },
          { name: 'üîë ƒê√≥ng g√≥p c·ªßa b·∫°n:', value: `${kingdomData.contributors[userId]} Soul`, inline: true }
        )
        .setImage(KINGDOM_IMAGES[kingdomData.level])
        .setFooter({ text: levelUpMessage ? levelUpMessage : 'Ti·∫øp t·ª•c ƒë√≥ng g√≥p ƒë·ªÉ n√¢ng c·∫•p v∆∞∆°ng qu·ªëc!' });

      await interaction.reply({ embeds: [embed] });
    }

    // üè∞ X·ª≠ l√Ω ki·ªÉm tra tr·∫°ng th√°i v∆∞∆°ng qu·ªëc
    else if (subcommand === 'kingdomstatus') {
      let kingdomData = (await storage.getItem('kingdomData')) || {
        level: 1,
        totalSouls: 0,
        contributors: {}
      };

      const embed = new EmbedBuilder()
        .setColor(0x5d3fd3)
        .setTitle('‚öîÔ∏è **Dark Kingdom Status** ‚öîÔ∏è')
        .setDescription(`üîÆ V∆∞∆°ng qu·ªëc hi·ªán ƒëang ·ªü c·∫•p **${kingdomData.level}**`)
        .addFields(
          { name: '‚ú® T·ªïng s·ªë Soul:', value: `${kingdomData.totalSouls} Soul`, inline: true },
          { name: 'üõ°Ô∏è Th√†nh vi√™n ƒë√≥ng g√≥p:', value: formatContributors(kingdomData.contributors), inline: false }
        )
        .setImage(KINGDOM_IMAGES[kingdomData.level])
        .setFooter({ text: 'H√£y ti·∫øp t·ª•c x√¢y d·ª±ng v∆∞∆°ng qu·ªëc!' });

      await interaction.reply({ embeds: [embed] });
    }
  }
};

/**
 * H√†m format danh s√°ch ƒë√≥ng g√≥p c·ªßa th√†nh vi√™n
 */
function formatContributors(contributors) {
  if (Object.keys(contributors).length === 0) return 'Ch∆∞a c√≥ ƒë√≥ng g√≥p n√†o.';
  return Object.entries(contributors)
    .map(([userId, souls]) => `<@${userId}>: ${souls} Soul`)
    .join('\n');
}
